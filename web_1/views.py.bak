from django.shortcuts import render

# Create your views here.
import json
from web.models import *
from django.http import HttpResponse
from web.forms import AddForm
import os
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.shortcuts import render
import time
from django.core.files import File

def collect(req):
    if req.POST:
        info = json.loads(req.body)
        sn = info['sn']
        sn_1 = info['sn_1']
        try:
            host = Host.objects.get(sn=sn, sn_1=sn_1)
        except:
            host = Host()
        host.sn = info['sn']
        host.sn_1 = info['sn_1']
        host.status = info['status']
        host.time = info['time']
        host.boot_time = info['boot_time']
        host.name = info['name']
        host.name1 = info['name1']
        host.family = info['family']
        host.cpu = info['cpu']
        host.memory = info['memory']
        host.disk = info['disk']
        host.disk_num = info['disk_num']
        host.hostname = info['hostname']
        host.stress_test = info['stress_test']
        host.network = info['network']
        host.mac = info['mac']
        host.mac_addr = info['mac_addr']
        host.raid = info['raid']
        host.bios = info['bios']
        host.bmc = info['bmc']
        host.message = info['message']
        host.sel = info['sel']
        host.fru = info['fru']
        host.smart_info = info['smart_info']
        try:
            host.enclosure = File(info['enclosure'])
        except:
            pass
        host.save()
        return HttpResponse('ok')
    else:
        form = Host.objects.all()
        PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        return render(req, os.path.join(PROJECT_ROOT, 'web/templates', 'collect.html'), {'form':form})

def info(req):
    if req.POST:
        info = json.loads(req.body)
        data = Info()
        data.message = info['message']
        data.save()
    return HttpResponse('ok')
        
def form(req):
    if req.POST:
        info = json.loads(req.body)
        sn = info['sn']
        ip = info['ip']
        try:
            stat = Stat.objects.get(ip=ip)
        except:
            stat = Stat()
        stat.status = info['status']
        stat.ip = info['ip']
        stat.sn = info['sn']
        stat.cpu = info['cpu']
        stat.mem = info['mem']
        stat.hostname = info['hostname']
        stat.save()
        return HttpResponse('ok')
    else:
        form = Stat.objects.all()
        count = form.count()
        form = form.order_by('-status', 'hostname')
        a = 1
        for i in form:
            b = i 
          #  i.delete()
            b.num = a
            a += 1
            b.save()
        num = []
        for i in form:
              if 'OS off' in i.status:
                  num.append(i.status[:-6])
              else:
                  num.append(i.status)
        dic = {}
        data = set(num)
        for i in data:
            dic[i] = num.count(i)
        strs = ""
        for k,v in dic.items():
            strs += '--"%s"(%s)--' %(k,v) 
       # return HttpResponse(json.dumps(stat))
        PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        return render(req, os.path.join(PROJECT_ROOT, 'web/templates', 'status.html'), {'form':form,'count':count,'dic':strs})
def Add(req):
    if req.POST:
        form = AddForm(req.POST)
        if form.is_valid():
            return HttpResponseRedirect('/')
    else:
        form = AddForm()
        PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        return render(req, os.path.join(PROJECT_ROOT, 'web/templates', 'status.html'), {'form':form})
                                                              
def smart(req):
    if req.POST:
        info = json.loads(req.body)
        sn = info['sn']
        try:
            smart = Smart.objects.get(sn=sn)
        except:
            smart = Smart()
        smart.sn = info['sn']
        smart.sn_1 = info['sn_1']
        smart.sel = info['sel']
        smart.time = info['time']
        smart.smart_info = info['smart_info']
        smart.save()
        return HttpResponse('ok')
    else:
        form = Smart.objects.all()
#        PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#        return render(req, os.path.join(PROJECT_ROOT, 'web/templates', 'smart.html'), {'form':form})
        return HttpResponse(form)

def usename(req, id, mang):
    form = Host.objects.get(id=id)
    message = form.message    
    dic = {}
    dic['NAME'] = message.split('\n')[0].split(':')[1].strip()
    ALL_LIST = [
                'FIMILY',
                'CHECK_STAT',
                'SN',
                'SN1',
                'TIME',
                'BOOT_TIME',
                'BIOS_TIME',
                'CPU',
                'MEMORY_INFO',
                'DISK_INFO',
                'RAID_INFO',
                'NETWORK_INFO',
                'MAC_INFO',
                'BIOS_VERSION',
                'BMC_VERSION',
                'PCIE_INFO',
                'FRU_INFO',
                'LOCATE_DISK',
                'LOCATE_MEMORY',
                'DISK_SN',
                ]
    OTHER_LIST = [
                'FIMILY',
                'CHECK_STAT',
                'SN',
                'SN1',
                'TIME',
                'CPU',
                'MEMORY_INFO',
                'DISK_INFO',
                'RAID_INFO',
                'NETWORK_INFO',
                'MAC_INFO',
                'BIOS_VERSION',
                'BMC_VERSION',
                'FRU_INFO',
                'LOCATE_DISK',
                'LOCATE_MEMORY',
                'DISK_SN',
                ]
    if 'BOOT TIME' in message:
        for i in xrange(len(ALL_LIST)):
            try:
                info = message.split(ALL_LIST[i+1].replace('_', ' '))[0]
                split_info = ALL_LIST[i].replace('_', ' ') +  ':'
                try:
                    data = info.split(split_info)[1]
                except:
                    data = ''
                dic[ALL_LIST[i]] = data
            except:
                info = message.split(ALL_LIST[i].replace('_', ' '))[0]
                dic[ALL_LIST[i]] = info.split(':')[1]
    else:
        for i in xrange(len(OTHER_LIST)):
            try:
                info = message.split(OTHER_LIST[i+1].replace('_', ' '))[0]
                split_info = OTHER_LIST[i].replace('_', ' ') +  ':'
                try:
                    data = info.split(split_info)[1]
                except:
                    data = ''
                dic[OTHER_LIST[i]] = data
            except:
                info = message.split(OTHER_LIST[i].replace('_', ' '))[0]
                dic[OTHER_LIST[i]] = info.split(':')[1]
    PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    return render(req, os.path.join(PROJECT_ROOT, 'web/templates', 'detail.html'), {'form':dic})


def checkStat(req):
    if req.POST: 
        info = req.POST
        if info['check'] == 'run':
         #   with open('/data/ytym/web/run.log','a') as f:
         #       f.write('run')
         #   return HttpResponseRedirect("/technology/web/host/")
            return HttpResponse('run')
        if info['check'] == 'stop':
        #    return HttpResponseRedirect("/technology/web/host/")
            return HttpResponse('stop')
    else:
        return HttpResponse('else')
#        return HttpResponseRedirect("/technology/web/host/")
